{"version":3,"file":"251.5103d3cac1bc1287.js","mappings":"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","sources":["./node_modules/viem/node_modules/@noble/curves/esm/_shortw_utils.js","./node_modules/viem/node_modules/@noble/curves/esm/abstract/curve.js","./node_modules/viem/node_modules/@noble/curves/esm/abstract/hash-to-curve.js","./node_modules/viem/node_modules/@noble/curves/esm/abstract/modular.js","./node_modules/viem/node_modules/@noble/curves/esm/abstract/utils.js","./node_modules/viem/node_modules/@noble/curves/esm/abstract/weierstrass.js","./node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js","./node_modules/viem/node_modules/@noble/hashes/esm/_md.js","./node_modules/viem/node_modules/@noble/hashes/esm/hmac.js","./node_modules/viem/node_modules/@noble/hashes/esm/sha256.js"],"sourcesContent":["/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return { ...create(defHash), create };\n}\n","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, bits) {\n    validateW(W, bits);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = calcWOpts(W, bits);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                if (n === _0n)\n                    break; // No need to go over empty scalar\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                if (wbits === 0)\n                    continue;\n                let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n                if (wbits < 0)\n                    curr = curr.negate();\n                // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n                acc = acc.add(curr);\n            }\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    if (points.length !== scalars.length)\n        throw new Error('arrays of points and scalars must have equal length');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(points.length));\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    const MASK = (1 << windowSize) - 1;\n    const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < scalars.length; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = BigInt((1 << windowSize) - 1);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n","import { mod } from './modular.js';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    anum(value);\n    anum(length);\n    if (value < 0 || value >= 1 << (8 * length))\n        throw new Error('invalid I2OSP input: ' + value);\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (lenInBytes > 65535 || ell > 255)\n        throw new Error('expand_message_xmd: invalid lenInBytes');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    abytes(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexport function isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x: x, y: y };\n    };\n}\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Same as encodeToCurve, but without hash\n        mapToCurve(scalars) {\n            if (!Array.isArray(scalars))\n                throw new Error('mapToCurve: expected array of bigints');\n            for (const i of scalars)\n                if (typeof i !== 'bigint')\n                    throw new Error('mapToCurve: expected array of bigints');\n            const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n","/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (modulo <= _0n)\n        throw new Error('invalid modulus');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n        // Crash instead of infinity loop, we cannot reasonable count until P.\n        if (Z > 1000)\n            throw new Error('Cannot find square root: likely non-prime P');\n    }\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order) {\n    const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n    return (f, x) => f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendre = FpLegendre(f.ORDER);\n    return (x) => {\n        const p = legendre(f, x);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF, } from './curve.js';\nimport { Field, getMinHashLength, invert, mapHashToField, mod, validateField, } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = ut.numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = ut.numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = ut.numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return b2n(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return ut.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('invalid private key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n        }\n        if (wrapPrivateKey)\n            num = mod(num, N); // disabled by default, enabled for BLS\n        ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (this.is0() || sc === _1n)\n                return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this))\n                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!ut.inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n            ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = getMinHashLength(CURVE.n);\n            return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\"\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && format !== 'compact' && format !== 'der')\n            throw new Error('format must be compact or der');\n        const isHex = typeof sg === 'string' || ut.isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj)\n                _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n","/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from './abstract/utils.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/** SHA2-256 hash function */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n"],"names":["hmac","concatBytes","randomBytes","weierstrass","getHash","hash","key","msgs","createCurve","curveDef","defHash","create","nLength","validateField","bitLen","validateObject","_0n","BigInt","_1n","constTimeNegate","condition","item","neg","negate","validateW","W","bits","Number","isSafeInteger","Error","calcWOpts","windows","Math","ceil","windowSize","validateMSMPoints","points","c","Array","isArray","forEach","p","i","validateMSMScalars","scalars","field","s","isValid","pointPrecomputes","WeakMap","pointWindowSizes","getW","P","get","wNAF","hasPrecomputes","elm","unsafeLadder","n","ZERO","d","add","double","precomputeWindow","base","window","push","precomputes","f","BASE","mask","maxNumber","shiftBy","offset","wbits","offset1","offset2","abs","cond1","cond2","wNAFUnsafe","acc","curr","getPrecomputes","transform","comp","set","wNAFCached","wNAFCachedUnsafe","prev","setWindowSize","delete","pippenger","fieldN","length","zero","MASK","buckets","fill","lastBits","floor","BITS","sum","j","scalar","resI","sumI","precomputeMSMUnsafe","tableSize","chunks","tables","map","res","validateBasic","curve","Fp","h","Gx","Gy","nBitLength","nByteLength","Object","freeze","ORDER","mod","abytes","bytesToNumberBE","utf8ToBytes","os2ip","i2osp","value","anum","from","Uint8Array","strxor","a","b","arr","expand_message_xmd","msg","DST","lenInBytes","H","outputLen","b_in_bytes","blockLen","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","pseudo_random_bytes","slice","expand_message_xof","k","dkLen","update","digest","hash_to_field","count","options","m","expand","_DST","log2p","toString","L","len_in_bytes","prb","u","e","elm_offset","tv","subarray","isogenyMap","COEFF","reverse","x","y","xNum","xDen","yNum","yDen","val","reduce","mul","div","createHasher","Point","mapToCurve","def","hashToCurve","u0","fromAffine","u1","clearCofactor","assertValidity","encodeToCurve","encodeDST","bitMask","bytesToNumberLE","ensureBytes","numberToBytesBE","numberToBytesLE","_2n","_3n","_4n","_5n","_8n","_9n","_16n","result","pow","num","power","modulo","pow2","invert","number","v","q","r","gcd","tonelliShanks","legendreC","Q","S","Z","p1div4","tonelliFast","root","eql","sqr","Q1div2","tonelliSlow","ONE","g","t2","ge","FpSqrt","sqrt3mod4","c1","sqrt5mod8","n2","nv","sub","isNegativeLE","FIELD_FIELDS","initial","BYTES","opts","FpPow","FpInvertBatch","nums","tmp","lastMultiplied","is0","inverted","inv","reduceRight","FpDiv","lhs","rhs","FpLegendre","order","legendreConst","FpIsSquare","legendre","_nBitLength","undefined","Field","isLE","redef","sqrtP","isOdd","sqrN","addN","subN","mulN","sqrt","invertBatch","lst","cmov","toBytes","fromBytes","bytes","FpSqrtOdd","FpSqrtEven","hashToPrivateScalar","groupOrder","hashLen","minLen","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","len","fieldLen","reduced","isBytes","ArrayBuffer","isView","constructor","name","abool","title","hexes","_","padStart","bytesToHex","hex","numberToHexUnpadded","hexToNumber","asciis","_0","_9","A","F","asciiToBase16","ch","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","char","numberToVarBytesBE","expectedLength","arrays","pad","equalBytes","diff","str","TextEncoder","encode","isPosBig","inRange","min","max","aInRange","bitGet","pos","bitSet","u8n","data","u8fr","createHmacDrbg","qByteLen","hmacFn","reset","reseed","seed","gen","out","sl","genUntil","pred","validatorFns","bigint","function","boolean","string","stringOrUint8Array","object","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","entries","notImplemented","memoized","fn","arg","computed","ut","validateSigVerOpts","lowS","prehash","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","allowInfinityPoint","endo","beta","splitScalar","b2n","h2b","DERErr","DER","Err","_tlv","tag","E","dataLen","lenLen","t","decode","first","isLong","lengthBytes","l","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","sig","rs","ss","seq","weierstrassPoints","CURVE","Fn","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","normPrivateKeyToScalar","lengths","N","includes","error","assertPrjPoint","other","toAffineMemo","iz","px","py","pz","z","ax","ay","zz","assertValidMemo","left","right","normalizeZ","toInv","fromHex","fromPrivateKey","privateKey","multiply","msm","_setWindowSize","wnaf","hasEvenY","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","multiplyUnsafe","sc","I","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","G","cofactor","toRawBytes","isCompressed","toHex","_bits","ProjectivePoint","validateOpts","bits2int","bits2int_modN","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrtError","suffix","message","isYOdd","isHeadOdd","cl","ul","numToNByteStr","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","to","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u2","hasHighS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","precompute","getPublicKey","isProbPub","getSharedSecret","privateA","publicB","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","sign","privKey","C","drbg","verify","signature","publicKey","sg","format","isHex","isObj","_sig","derError","is","SWUFpSqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","sqrtRatio","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","mapToCurveSimpleSWU","B","tv6","sha256","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","Fpk1","secp256k1","a1","b1","a2","POW_2_128","TAGGED_HASH_PREFIXES","taggedHash","messages","tagP","tagH","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","rand","k_","rx","schnorrVerify","pub","schnorr","isoMap","mapSWU","htf","aexists","aoutput","Hash","createView","setBigUint64","view","byteOffset","_32n","_u32_max","wh","wl","setUint32","Chi","Maj","HashMD","padOffset","finished","destroyed","buffer","take","dataView","process","roundClean","digestInto","oview","outLen","state","destroy","_cloneInto","ahash","HMAC","_key","iHash","oHash","buf","getPrototypeOf","rotr","wrapConstructor","SHA256_K","Uint32Array","SHA256_IV","SHA256_W","SHA256","D","getUint32","W15","W2","s0","s1","sigma1","T1","sigma0","T2","SHA224","sha224"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}